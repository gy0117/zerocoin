// Code generated by goctl. DO NOT EDIT.

package model

import (
	"github.com/jinzhu/copier"
	"zero-common/tools"
)

type UserTransaction struct {
	Id          int64   `gorm:"column:id"`           // 编号
	Address     string  `gorm:"column:address"`      // 充值或提现地址、或转账地址
	Amount      float64 `gorm:"column:amount"`       // 充币金额
	CreateTime  int64   `gorm:"column:create_time"`  // 创建时间
	Fee         float64 `gorm:"column:fee"`          // 交易手续费
	Flag        int64   `gorm:"column:flag"`         // 标识位
	UserId    int64   `gorm:"column:user_id"`    // 会员ID
	Symbol      string  `gorm:"column:symbol"`       // 币种名称 比如BTC
	Type        int64   `gorm:"column:type"`         // 交易类型,  0 RECHARGE 充值类型 1 WITHDRAW 提现类型
	DiscountFee string  `gorm:"column:discount_fee"` // 折扣手续费
	RealFee     string  `gorm:"column:real_fee"`     // 实收手续费
}

func (*UserTransaction) TableName() string {
	return "user_transaction"
}

const (
	RECHARGE          = iota // 充值
	WITHDRAW                 // 提现
	TRANSFER_ACCOUNTS        // 转账
	EXCHANGE                 // 币币交易
)

func transType(v int64) string {
	var res string
	if v == RECHARGE {
		res = "RECHARGE"
	} else if v == WITHDRAW {
		res = "WITHDRAW"
	} else if v == TRANSFER_ACCOUNTS {
		res = "TRANSFER_ACCOUNTS"
	} else if v == EXCHANGE {
		res = "EXCHANGE"
	}
	return res
}

func TransTypeStr(v string) int {
	var res int
	if v == "RECHARGE" {
		res = 0
	} else if v == "WITHDRAW" {
		res = 1
	} else if v == "TRANSFER_ACCOUNTS" {
		res = 2
	} else if v == "EXCHANGE" {
		res = 3
	}
	return res
}

// 业务对象
type UserTransactionVo struct {
	Id          int64   `json:"id" from:"id"`
	Address     string  `json:"address" from:"address"`
	Amount      float64 `json:"amount" from:"amount"`
	CreateTime  string  `json:"createTime" from:"createTime"`
	Fee         float64 `json:"fee" from:"fee"`
	Flag        int     `json:"flag" from:"flag"`
	UserId    int64   `json:"userId" from:"userId"`
	Symbol      string  `json:"symbol" from:"symbol"`
	Type        string  `json:"type" from:"type"`
	DiscountFee string  `json:"discountFee" from:"discountFee"`
	RealFee     string  `json:"realFee" from:"realFee"`
}

func (mt *UserTransaction) ToVo() *UserTransactionVo {
	vo := &UserTransactionVo{}
	copier.Copy(vo, mt)
	vo.CreateTime = tools.ToTimeString(mt.CreateTime)
	vo.Type = transType(mt.Type)
	return vo
}

