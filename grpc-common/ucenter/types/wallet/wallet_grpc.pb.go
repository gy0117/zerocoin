// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: wallet.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wallet_FindWalletBySymbol_FullMethodName = "/wallet.Wallet/FindWalletBySymbol"
	Wallet_FindWallet_FullMethodName         = "/wallet.Wallet/FindWallet"
	Wallet_ResetWalletAddress_FullMethodName = "/wallet.Wallet/ResetWalletAddress"
	Wallet_GetAllTransactions_FullMethodName = "/wallet.Wallet/GetAllTransactions"
	Wallet_GetAddress_FullMethodName         = "/wallet.Wallet/GetAddress"
)

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	FindWalletBySymbol(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*UserWallet, error)
	FindWallet(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*FindWalletResp, error)
	ResetWalletAddress(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletResp, error)
	GetAllTransactions(ctx context.Context, in *AssetReq, opts ...grpc.CallOption) (*UserTransactionListResp, error)
	GetAddress(ctx context.Context, in *AssetReq, opts ...grpc.CallOption) (*AddressListResp, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) FindWalletBySymbol(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*UserWallet, error) {
	out := new(UserWallet)
	err := c.cc.Invoke(ctx, Wallet_FindWalletBySymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FindWallet(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*FindWalletResp, error) {
	out := new(FindWalletResp)
	err := c.cc.Invoke(ctx, Wallet_FindWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ResetWalletAddress(ctx context.Context, in *WalletReq, opts ...grpc.CallOption) (*WalletResp, error) {
	out := new(WalletResp)
	err := c.cc.Invoke(ctx, Wallet_ResetWalletAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAllTransactions(ctx context.Context, in *AssetReq, opts ...grpc.CallOption) (*UserTransactionListResp, error) {
	out := new(UserTransactionListResp)
	err := c.cc.Invoke(ctx, Wallet_GetAllTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAddress(ctx context.Context, in *AssetReq, opts ...grpc.CallOption) (*AddressListResp, error) {
	out := new(AddressListResp)
	err := c.cc.Invoke(ctx, Wallet_GetAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	FindWalletBySymbol(context.Context, *WalletReq) (*UserWallet, error)
	FindWallet(context.Context, *WalletReq) (*FindWalletResp, error)
	ResetWalletAddress(context.Context, *WalletReq) (*WalletResp, error)
	GetAllTransactions(context.Context, *AssetReq) (*UserTransactionListResp, error)
	GetAddress(context.Context, *AssetReq) (*AddressListResp, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) FindWalletBySymbol(context.Context, *WalletReq) (*UserWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWalletBySymbol not implemented")
}
func (UnimplementedWalletServer) FindWallet(context.Context, *WalletReq) (*FindWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWallet not implemented")
}
func (UnimplementedWalletServer) ResetWalletAddress(context.Context, *WalletReq) (*WalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetWalletAddress not implemented")
}
func (UnimplementedWalletServer) GetAllTransactions(context.Context, *AssetReq) (*UserTransactionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactions not implemented")
}
func (UnimplementedWalletServer) GetAddress(context.Context, *AssetReq) (*AddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_FindWalletBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FindWalletBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_FindWalletBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FindWalletBySymbol(ctx, req.(*WalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FindWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FindWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_FindWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FindWallet(ctx, req.(*WalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ResetWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ResetWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ResetWalletAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ResetWalletAddress(ctx, req.(*WalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAllTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAllTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAllTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAllTransactions(ctx, req.(*AssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAddress(ctx, req.(*AssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindWalletBySymbol",
			Handler:    _Wallet_FindWalletBySymbol_Handler,
		},
		{
			MethodName: "FindWallet",
			Handler:    _Wallet_FindWallet_Handler,
		},
		{
			MethodName: "ResetWalletAddress",
			Handler:    _Wallet_ResetWalletAddress_Handler,
		},
		{
			MethodName: "GetAllTransactions",
			Handler:    _Wallet_GetAllTransactions_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Wallet_GetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
