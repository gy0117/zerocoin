// Code generated by goctl. DO NOT EDIT.
// Source: wallet.proto

package uclient

import (
	"context"
	"grpc-common/ucenter/types/withdraw"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	WithdrawRequest     = withdraw.WithdrawRequest
	AddressSimpleList     = withdraw.AddressSimpleList
	SendCodereq = withdraw.SendCodeReq
	WithdrawEmptyResp = withdraw.EmptyResp
	RecordList = withdraw.RecordList


	Withdraw interface {
		FindAddressesByCoinId(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*AddressSimpleList, error)
		SendCode(ctx context.Context, in *SendCodereq, opts ...grpc.CallOption) (*WithdrawEmptyResp, error)
		Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawEmptyResp, error)
		WithdrawRecord(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*RecordList, error)
	}

	defaultWithdraw struct {
		cli zrpc.Client
	}
)

func NewWithdraw(cli zrpc.Client) Withdraw {
	return &defaultWithdraw{
		cli: cli,
	}
}



func (m *defaultWithdraw) FindAddressesByCoinId(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*AddressSimpleList, error) {
	client := withdraw.NewWithdrawClient(m.cli.Conn())
	return client.FindAddressesByCoinId(ctx, in, opts...)
}


func (m *defaultWithdraw) SendCode(ctx context.Context, in *SendCodereq, opts ...grpc.CallOption) (*WithdrawEmptyResp, error) {
	client := withdraw.NewWithdrawClient(m.cli.Conn())
	return client.SendCode(ctx, in, opts...)
}


func (m *defaultWithdraw) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawEmptyResp, error) {
	client := withdraw.NewWithdrawClient(m.cli.Conn())
	return client.Withdraw(ctx, in, opts...)
}


func (m *defaultWithdraw) WithdrawRecord(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*RecordList, error) {
	client := withdraw.NewWithdrawClient(m.cli.Conn())
	return client.WithdrawRecord(ctx, in, opts...)
}
