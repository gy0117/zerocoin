// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package eclient

import (
	"context"
	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
	"grpc-common/exchange/types/order"
)

type (
	OrderReq  = order.OrderReq
	OrderResp = order.OrderResp
	AddOrderResp = order.AddOrderResp
	ExchangeOrder = order.ExchangeOrder
	CancelOrderResp = order.CancelOrderResp

	Order interface {
		GetHistoryOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderResp, error)
		GetCurrentOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderResp, error)
		AddOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption)(*AddOrderResp, error)
		FindByOrderId(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*ExchangeOrder, error)
		CancelOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*CancelOrderResp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (o *defaultOrder) GetHistoryOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderResp, error) {
	client := order.NewOrderClient(o.cli.Conn())
	return client.GetHistoryOrder(ctx, in, opts...)
}

func (o *defaultOrder) GetCurrentOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderResp, error) {
	client := order.NewOrderClient(o.cli.Conn())
	return client.GetCurrentOrder(ctx, in, opts...)
}


func (o *defaultOrder) AddOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	client := order.NewOrderClient(o.cli.Conn())
	return client.AddOrder(ctx, in, opts...)
}

func (o *defaultOrder) FindByOrderId(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*ExchangeOrder, error) {
	client := order.NewOrderClient(o.cli.Conn())
	return client.FindByOrderId(ctx, in, opts...)
}

func (o *defaultOrder) CancelOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*CancelOrderResp, error) {
	client := order.NewOrderClient(o.cli.Conn())
	return client.CancelOrder(ctx, in, opts...)
}