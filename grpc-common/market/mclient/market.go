// Code generated by goctl. DO NOT EDIT.
// Source: rate.proto

package mclient

import (
	"context"
	"grpc-common/market/types/market"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	MarketReq        = market.MarketRequest
	CoinThumbResp    = market.CoinThumbResponse
	ExchangeCoinResp = market.ExchangeCoin
	CoinResp         = market.Coin
	HistoryResp      = market.HistoryResp
	ExchangeCoinListResp      = market.ExchangeCoinResp
	CoinList      = market.CoinList

	Market interface {
		FindSymbolThumbTrend(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinThumbResp, error)
		FindSymbolInfo(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*ExchangeCoinResp, error)
		FindCoinInfo(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinResp, error)
		GetHistoryKline(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*HistoryResp, error)
		FindExchangeCoinVisible(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*ExchangeCoinListResp, error)
		FindAllCoins(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinList, error)
		FindCoinByCoinId(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinResp, error)
	}

	defaultMarket struct {
		cli zrpc.Client
	}
)

func NewMarket(cli zrpc.Client) Market {
	return &defaultMarket{
		cli: cli,
	}
}

func (m *defaultMarket) FindSymbolThumbTrend(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinThumbResp, error) {
	client := market.NewMarketClient(m.cli.Conn())
	return client.FindSymbolThumbTrend(ctx, in, opts...)
}

func (m *defaultMarket) FindSymbolInfo(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*ExchangeCoinResp, error) {
	client := market.NewMarketClient(m.cli.Conn())
	return client.FindSymbolInfo(ctx, in, opts...)
}

func (m *defaultMarket) FindCoinInfo(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinResp, error) {
	client := market.NewMarketClient(m.cli.Conn())
	return client.FindCoinInfo(ctx, in, opts...)
}

func (m *defaultMarket) GetHistoryKline(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*HistoryResp, error) {
	client := market.NewMarketClient(m.cli.Conn())
	return client.GetHistoryKline(ctx, in, opts...)
}

func (m *defaultMarket) FindExchangeCoinVisible(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*ExchangeCoinListResp, error) {
	client := market.NewMarketClient(m.cli.Conn())
	return client.FindExchangeCoinVisible(ctx, in, opts...)
}

func (m *defaultMarket) FindAllCoins(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinList, error) {
	client := market.NewMarketClient(m.cli.Conn())
	return client.FindAllCoins(ctx, in, opts...)
}

func (m *defaultMarket) FindCoinByCoinId(ctx context.Context, in *MarketReq, opts ...grpc.CallOption) (*CoinResp, error) {
	client := market.NewMarketClient(m.cli.Conn())
	return client.FindCoinByCoinId(ctx, in, opts...)
}

