// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: market.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Market_FindSymbolThumbTrend_FullMethodName    = "/market.Market/FindSymbolThumbTrend"
	Market_FindSymbolInfo_FullMethodName          = "/market.Market/FindSymbolInfo"
	Market_FindCoinInfo_FullMethodName            = "/market.Market/FindCoinInfo"
	Market_GetHistoryKline_FullMethodName         = "/market.Market/GetHistoryKline"
	Market_FindExchangeCoinVisible_FullMethodName = "/market.Market/FindExchangeCoinVisible"
	Market_FindAllCoins_FullMethodName            = "/market.Market/FindAllCoins"
	Market_FindCoinByCoinId_FullMethodName        = "/market.Market/FindCoinByCoinId"
)

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	FindSymbolThumbTrend(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*CoinThumbResponse, error)
	FindSymbolInfo(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*ExchangeCoin, error)
	FindCoinInfo(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*Coin, error)
	GetHistoryKline(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*HistoryResp, error)
	FindExchangeCoinVisible(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*ExchangeCoinResp, error)
	FindAllCoins(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*CoinList, error)
	FindCoinByCoinId(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*Coin, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) FindSymbolThumbTrend(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*CoinThumbResponse, error) {
	out := new(CoinThumbResponse)
	err := c.cc.Invoke(ctx, Market_FindSymbolThumbTrend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindSymbolInfo(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*ExchangeCoin, error) {
	out := new(ExchangeCoin)
	err := c.cc.Invoke(ctx, Market_FindSymbolInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindCoinInfo(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*Coin, error) {
	out := new(Coin)
	err := c.cc.Invoke(ctx, Market_FindCoinInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetHistoryKline(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*HistoryResp, error) {
	out := new(HistoryResp)
	err := c.cc.Invoke(ctx, Market_GetHistoryKline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindExchangeCoinVisible(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*ExchangeCoinResp, error) {
	out := new(ExchangeCoinResp)
	err := c.cc.Invoke(ctx, Market_FindExchangeCoinVisible_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindAllCoins(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*CoinList, error) {
	out := new(CoinList)
	err := c.cc.Invoke(ctx, Market_FindAllCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindCoinByCoinId(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*Coin, error) {
	out := new(Coin)
	err := c.cc.Invoke(ctx, Market_FindCoinByCoinId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	FindSymbolThumbTrend(context.Context, *MarketRequest) (*CoinThumbResponse, error)
	FindSymbolInfo(context.Context, *MarketRequest) (*ExchangeCoin, error)
	FindCoinInfo(context.Context, *MarketRequest) (*Coin, error)
	GetHistoryKline(context.Context, *MarketRequest) (*HistoryResp, error)
	FindExchangeCoinVisible(context.Context, *MarketRequest) (*ExchangeCoinResp, error)
	FindAllCoins(context.Context, *MarketRequest) (*CoinList, error)
	FindCoinByCoinId(context.Context, *MarketRequest) (*Coin, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) FindSymbolThumbTrend(context.Context, *MarketRequest) (*CoinThumbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSymbolThumbTrend not implemented")
}
func (UnimplementedMarketServer) FindSymbolInfo(context.Context, *MarketRequest) (*ExchangeCoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSymbolInfo not implemented")
}
func (UnimplementedMarketServer) FindCoinInfo(context.Context, *MarketRequest) (*Coin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCoinInfo not implemented")
}
func (UnimplementedMarketServer) GetHistoryKline(context.Context, *MarketRequest) (*HistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryKline not implemented")
}
func (UnimplementedMarketServer) FindExchangeCoinVisible(context.Context, *MarketRequest) (*ExchangeCoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindExchangeCoinVisible not implemented")
}
func (UnimplementedMarketServer) FindAllCoins(context.Context, *MarketRequest) (*CoinList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllCoins not implemented")
}
func (UnimplementedMarketServer) FindCoinByCoinId(context.Context, *MarketRequest) (*Coin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCoinByCoinId not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_FindSymbolThumbTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindSymbolThumbTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_FindSymbolThumbTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindSymbolThumbTrend(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindSymbolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindSymbolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_FindSymbolInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindSymbolInfo(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_FindCoinInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindCoinInfo(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetHistoryKline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetHistoryKline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_GetHistoryKline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetHistoryKline(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindExchangeCoinVisible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindExchangeCoinVisible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_FindExchangeCoinVisible_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindExchangeCoinVisible(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindAllCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindAllCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_FindAllCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindAllCoins(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindCoinByCoinId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindCoinByCoinId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_FindCoinByCoinId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindCoinByCoinId(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSymbolThumbTrend",
			Handler:    _Market_FindSymbolThumbTrend_Handler,
		},
		{
			MethodName: "FindSymbolInfo",
			Handler:    _Market_FindSymbolInfo_Handler,
		},
		{
			MethodName: "FindCoinInfo",
			Handler:    _Market_FindCoinInfo_Handler,
		},
		{
			MethodName: "GetHistoryKline",
			Handler:    _Market_GetHistoryKline_Handler,
		},
		{
			MethodName: "FindExchangeCoinVisible",
			Handler:    _Market_FindExchangeCoinVisible_Handler,
		},
		{
			MethodName: "FindAllCoins",
			Handler:    _Market_FindAllCoins_Handler,
		},
		{
			MethodName: "FindCoinByCoinId",
			Handler:    _Market_FindCoinByCoinId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market.proto",
}
