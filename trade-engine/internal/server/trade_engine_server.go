// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"
	"github.com/shopspring/decimal"
	"grpc-common/trade-engine/types/match"
	"trade-engine/internal/engine"
	"trade-engine/internal/model"
	"trade-engine/internal/svc"
)

var defaultTradePairs = []string{"BTC/USDT", "ETH/USDT"}

type TradeEngineServer struct {
	svcCtx     *svc.ServiceContext
	tradeEngine *engine.TradeEngine
	match.UnimplementedMatchServiceServer
}

func NewTradeEngineServer(svcCtx *svc.ServiceContext) *TradeEngineServer {
	server := &TradeEngineServer{
		svcCtx: svcCtx,
	}
	server.init()
	return server
}

func (tes *TradeEngineServer) init() {
	tradeEngine, err := engine.NewTradeEngine(defaultTradePairs, tes.svcCtx.KCli)
	if err != nil {
		panic(err)
		return
	}
	tes.tradeEngine = tradeEngine
}

func (tes *TradeEngineServer) AddOrder(ctx context.Context, in *match.AddOrderRequest) (*match.AddOrderResponse, error) {
	price, err := decimal.NewFromString(in.Order.Price)
	if err != nil {
		return &match.AddOrderResponse{
			Code: -1,
			Msg:  "price err",
		}, err
	}
	quantity, err := decimal.NewFromString(in.Order.Quantity)
	if err != nil {
		return &match.AddOrderResponse{
			Code: -1,
			Msg:  "quantity err",
		}, err
	}

	order := &model.Order{
		Id:        in.Order.Id,
		Uid:       in.Order.Uid,
		TradePair: in.Order.TradePair,
		Price:     price,
		Quantity:  quantity,
		Side:      model.Side(in.Order.Side),
		Type:      model.Type(in.Order.Type),
	}
	err = tes.tradeEngine.AddOrder(order)
	if err != nil {
		return &match.AddOrderResponse{
			Code: -1,
			Msg: err.Error(),
		}, err
	}
	return &match.AddOrderResponse{
		Code: 0,
		Msg: "success",
	}, nil
}

func (tes *TradeEngineServer) CancelOrder(ctx context.Context, cancelOrderRequest *match.CancelOrderRequest) (*match.CancelOrderResponse, error) {
	return nil, nil
}
